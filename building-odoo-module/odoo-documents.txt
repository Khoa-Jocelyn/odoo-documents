- Odoo module là các phần mở rộng cửa cả server và client đóng gói dưới dạng module và được nạp sẵn trong cơ sở dữ liệu.
==================================================================================
==================================================================================			
			CÁC THÀNH PHẦN CỦA MỘT MODULE

Bao gồm 5 thành phần chính:
- Business Object: Được khai báo là các lớp Python, là các tài nguyên được Odoo tự động duy trì dựa trên cấu hình của nó

- Object views: Định nghĩa đối tượng giao diện người dùng.

- Data files: Bao gồm các files XML, CSV với các chức năng
	+ Định nghĩa các view hiển thị hoặc báo cáo
	+ Cấu hình dữ liệu, cấu hình các quy tác bảo mật, phân quyền,...
	+ ...
- Web controllers: Xử lý các yêu cầu từ trình duyệt

- Static web data: Các files ảnh, css, javascript,... dạng dữ liệu tĩnh được sử dụng trên giao diện hoặc trang web
==================================================================================
==================================================================================
			CẤU TRÚC CỦA MỘT MODULE

- Mỗi  module là một thư mục nằm trong thư mục addons-thư mục gốc chửa nhiều module.

- Mỗi module được chỉ định bằng sử dụng tùy chọn [--addons-path] 

Một module được tổ chức bao gồm các thư mục sau: 12 thư mục
- controller: chứa các controller (http routes)
- data: Bao gồm các file dữ liệu XML cho các bản ghi trong model
- demo: Các file dữ liệu kiểm thử XML 
- security: Chứa các config phân quyền, csv, xml,...
- models: Chứa các file để dịnh nghĩa các đối tượng nghiệp vụ
- reports: Chứa các model  báo cáo (BI/analysis), webkit report templates.
- static: bao gồm web assets, thư mục css/, js/, img/,.
- template: Chứa các web template.
- views: bao gồm các views và các mẫu in QWeb report.
- wizards: Chứa các wizard model và views.
- manifestt: Bao gồm cá thông tin cấu hình  module

==================================================================================
==================================================================================
			MODEL TRONG ODOO
- Model trong odoo hay còn gọi là một tập hợp các bản ghi có thứ tự "recordset", một bản ghi sẽ chứa các trường thông tin của đối tượng nghiệp vụ.
Model được khởi tạo bằng cách kế thừa đến 1 trong 3 kiểu class:
- Model
- TransientModel
- AbstractModel
==================================================================================
### Class Model [models.Model] ###
- Là một Super-class chính cho tất cả các model Odoo duy trì dữ liệu thông thường trong database - chứa những bản ghi - record vô hạn. Một model cơ bản được khởi tạo thông qua việc kế thừa class này

		+ _auto = True
		+ _transient = False
		+ _abstract = False
==================================================================================
### Class TransientModel [models.TransientModel] ###
- Giống như class models.Model , các model kế thừa class models.TransientModel cũng sẽ khởi tạo một bảng dữ liệu tương ứng trong database. Tuy nhiên, model kế thừa tới class này chỉ chứa các bản ghi - record ngắn hạn.
	+ Những bản ghi này có đặc điểm là chỉ duy trì tạm thời, thường xuyên được dọn dẹp hoặc xóa hẳn khỏi database. Chỉ tạo ra duy nhất một lần với mục đích sử dụng đúng duy nhát một lần đó.
	
- class models.TransientModel áp dụng quy tắc quản lý quyền truy cập đơn giản như sau: Tất cả người dùng đều có quyền tạo record mới và đồng thời chỉ có quyền truy cập đến những records đã được tạo bởi chính họ. Mặt khác, người dùng với quyền cao nhất (superuser) thì lại có toàn quyền truy cập tới tất cả các records của tất cả các TransientModels.

		+ _auto = True
		+ _transient = True
		+ _abstract = False
==================================================================================
### Class AbstractModel [models.AbstractModel] ###
- Giống như abstract class ở Python, abstract model có mục đích duy nhất là sẽ được kế thừa lại bởi các model khác.

- Khởi tạo một AbstractModel sẽ không khởi tạo 1 bảng dữ liệu dưới database.

		+ _auto = False
		+ _abstract = True

==================================================================================
### Các trường trong model
Thuộc tính chung của Model:

## _name = None ##
Tên của model. Giá trị là string được viết cách nhau bởi dấu chấm. 
Ví dụ: _name = 'education.student'

## _description = None ## 
Tên không theo form quy chuẩn của model. Ví dụ: _description = 'student'

## _inherit = None ## (tham khảo thêm Kế thừa trong ORM)
Tham số truyền vào là string hoặc list(string)
Thuộc tính cho phép một model kế thừa đến một hoặc nhiều model khác. 
Thuộc tính này khác với thuộc tính _inherit là đây là kiểu kế thừa Traditional - Truyền thống
Ví dụ: _inherit = 'library.book'

## _inherits = {} ## (tham khảo thêm Kế thừa trong ORM)
Thuộc tính cho phép một model kế thừa đến một hoặc nhiều model khác. 
Thuộc tính này khác với thuộc tính _inherit là đây là kiểu kế thừa Delegation - ủy quyền 

## _auto ##
Chỉ định có tạo bảng dữ liệu ở database hay không. Giá trị mặc định của thuộc tính này là: True với Model và TransientModel và False với AbstractModel.

## _sequence = None ##
Trình tự SQL để sử dụng cho trường ID, ví dụ 1,2 3,4, …

## _sql_constraints = [] ##
SQL constraints [(name, sql_def, message)]. Được sử dụng để chặn tất cả những record lưu vào database không thỏa mãn điều kiện đề ra. Ví dụ, check không cho lưu vào database những record của student có student_code trùng lặp nhau.
Ví dụ: _sql_constraints = [('student_code_unique', 'unique(student_code)', "The student code must be unique!")]

## _rec_name = None ## 
Trường để gán nhãn tên cho một record, được lấy giá trị mặc định từ trường name. 
Cụ thể, record của sinh viên Hank Aaron được hiển thị với tên là Hank Aaron. Nếu gán giá trị _rec_name = 'student_code' thì tên record sẽ là HA001 thay vì Hank Aaron (Xem ví dụ ở phần giới thiệu chung).

## _registry ##
Khi tạo class mới: gán giá trị True để tạo instance cho class này và ngược lại.

## _log_access ##
Chỉ định ORM có hay không việc tự động tạo và cập nhật các trường thông tin tự động (tham khảo thêm ORM advanced). Giá trị của thuộc tính sẽ được gán theo giá trị của thuộc tính _auto.

## _table = None ##
Tên bảng dữ liệu SQL được sử dụng bởi model nếu _auto = True.
==================================================================================
==================================================================================
			KẾ THỪA TRONG ODOO
Có 3 kiểu kế thừa trong Odoo:

Kế thừa truyền thống (Traditional): Tạo một model mới từ model có sẵn, thêm thông tin / dữ liệu / thuộc tính mới cho model mới và giữ nguyên model có sẵn kia.

Kế thừa mở rộng (Extended): Mở rộng model có sẵn và thay thế hoặc mở rộng các thông tin / dữ liệu / thuộc tính cũ bằng các thông tin / dữ liệu / thuộc tính mới.

Kế thừa ủy thác (Delegation): Tạo ủy quyền các trường các model có sẵn tới model mới. Model mới sẽ có toàn bộ các trường của model có sẵn.
==================================================================================





==================================================================================
==================================================================================
			QUAN HỆ GIỮA CÁC ĐỐI TƯỢNG

- Một thành phần quan trọng trong Odoo đó là lớp ORM. ORM được odoo cung cấp và có đầy đủ các thao tác với cơ sở dữ liệu


